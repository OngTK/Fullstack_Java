package daily.day06_250707;

import java.sql.Struct;

public class Example2 {
    public static void main(String[] args) {
        /*
         [ 클래스와 객체 ]
            1. 객체 : '주체' 아닌 의사나 행위를 미치는 대상
            2. 객체의 종류 : 속성과 기능을 정의할 수 있는 모든 것
            3. 객체지향 프로그래밍 : 개발자(주체)가 컴퓨터 안에서 (객체)대상을 만드는 것
            4. 클래스 : 객체를 만들기 위한 설계도, 속성과 기능을 코드로 표현
                - 속성 : 대상의 본질적인 특징·성질 = 멤버변수
                - 기능 : 대상의 작동/행위/이벤트   = 멤버함수 = 메소드(method)
             ※ 자바의 모든 코드는 클래스 단위로 컴파일
            5. 생활 속 ex
                (1) 학생 객체 만들기
                        1. 클래스 정의                               : 속성과 기능을 정의
                            속성 : 이름, 학번, 학급, 연락처 etc.
                            이벤트 : 공부하기(), 밥먹기(), 잠자기() etc.
                        2. 객체 정의
                            new 학생();
                        3. 객체 내 멤버변수, 메소드 접근
                            학생.학번
                            
                (2) 붕어빵 객체 만들기
                        1. 클래스 정의
                            속성 : 내용물, 가격
                            이벤트 : 굽기(), 꺼내기(), 판매()
                        2. 객체 정의
                            new 붕어빵();
                        3. 멤버변수, 메소드
                            붕어빵.내용물
                        
             6. 사용법
                < 클래스 만들기 >
                        class 클래스명 { 타입 멤버변수명; }
                        별도의 파일 만들기
                < 객체 만들기>
                        new 클래스명()
                < 객체 내 멤버변수 호출 >
                        변수명.멤버변수  ※ .(온점) : 도트·접근연산자
                < 객체 내 멤버변수 값 수정>
                        변수명.멤버변수 = 새로운 값
                < 객체 내 멤버변수 추가/삭제 불가>
                        실행 도중 클래스 정보 수정 불가 : 유연성이 떨어짐
================================
[ 클래스와 객체 ]
    java는 컴파일(번역)을 클래스 단위로 처리

    1) 정의
        (1) 객체
                : 행위의 영향을 받는 대상
        (2) 클래스
                : 객체를 만들기 위하여 객체를 정의하는 설계도
    2) 클래스
        (1) 멤버변수    : 객체 내에 포함되는 변수, 속성/특징/성질 = 값/데이트
        (2) 메소드      : 객체 내에 포함되는 함수, 이벤트/행위/작동 = 실행 명령어의 집합
        (3) 생성자      : 객체가 생성될 때의 초기화 함수
                          사용자가 커스텀해서 사용하므로 정해져있지 않음.
    3) 클래스 사용법
        (1) 선언
            ① java 파일 내에서 여러 개의 클래스를 선언(비추천)
            ② java 파일 내 클래스 1개만 존재하도록 개별 파일로 선언(권장)
            ```
            class 클래스명{
                멤버변수;
                메소드;
                생성자;
            }
            ```

    4) 객체 사용법
        (1) 선언
            new 클래스명();
            ex) 클래스명 변수명 = new 클래스명();
                ※ new 연산자 : 클래스를 기반으로 객체를 생성하며 메모리를 할당하는 키워드
        (2) 객체 내 멤버변수 호출
            변수명.멤버변수명
                ※ .(온점, 도트) 접근연산자 : 객체 내에 포함된 멤버변수, 메소드 등에 접근하는 키워드
        (3) 객체 내 멤버변수 값 수정
            변수명.멤버변수명 = 새로운 값
        (4) 객체 내에 멤버변수 추가/삭제 불가
                : 클래스는 컴파일(실행/번역)된 이후에는 수정 불가!!
         */

        /*  [1] 학생 클래스 만들기 : 학생 객체를 만들기 위한 속성과 기능을 정의하는 곳
                1. class 밖에서 선언 : class 클래스명 { }
            [2] 학생 클래스를 이용한 학생 객체 만들기
                    : 자바는 객체를 만들기 위해서 무조건 클래스가 필요
                new 클래스명();

                new Student();

            [3] 주로 객체는 변수에 대입/저장하여 사용
                변수의 타입 = 객체의 클래스로 선언
                Student s1 = new Student();

            [4] 생성된 객체 정보를 호출
                    System.out.println(s1);             // daily.day06_250707.Student@119d7047 >> 주소값 호출
                변수명.멤버변수 : 객체 내 멤버변수 호출
                    System.out.println(s1.studentName)

            [5] 객체 내 멤버변수 호출
                    System.out.println(s1.studentName);

            [6] 객체 내 멤버변수 값 수정
                    s1.studentName = "유재석";
                    
            [7] 객체 내 멤버변수 삭제/추가 불가
                    : 실행 도중에는 클래스 정보를 수정할 수 없음

======

            [8] 붕어빵 객체 만들기
                1) 붕어빵 객체를 만들기 위한 클래스(틀)·설계도 만들기
                2) 붕어빵 객체 만들기
                    붕어빵 클래스를 이용해서 객체를 생성 (팥2 슈크림 1 주문)
        */

        Student s1 = new Student();
        System.out.println(s1); // daily.day06_250707.Student@119d7047
        System.out.println(s1.studentName);
        s1.studentName = "유재석";

        붕어빵틀 빵1 = new 붕어빵틀();
        빵1.내용물 = "팥";
        빵1.가격 = 1000;

        붕어빵틀 빵2 = new 붕어빵틀();
        빵2.내용물 = "팥";
        빵2.가격 = 1000;
        //※ 객체 내에서 동일한 데이터를 갖더라도 서로 다른 객체!
        // new 연산자는 항상 새로운 객체를 만드는 객체생성 키워드

        붕어빵틀 빵3 = new 붕어빵틀();
        빵3.내용물 = "슈크림";
        빵3.가격 = 1500;

        // 객체와 배열의 관계
        //      배열은 동일한 타입(클래스)의 데이터(객체)를 여러 개 저장할 수 있음

        붕어빵틀[] 빵봉지 = {빵1, 빵2, 빵3};
        
        // 서로 다른 속성/타입의 묶음 > 객체
        // 같은 속성/타입의 묶음 > 배열

    } // main end
} // class end

class Student {
    // Class = 객체 내 필요한 속성과 기능을 정의 >> 객체를 만드는 것이 아님

    int studentID;              //'학번' 속성 정의
    String studentName;         //'이름' 속성 정의

} // student class end

class 붕어빵 {

}