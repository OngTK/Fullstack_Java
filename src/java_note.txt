[ 기본타입 ]
    1. 정의 : 자료들의 분류
    2. 목적 : 효율적인 자료 처리
    3. 종류 : 8가지
        [정수]   byte     1바이트    -128 ~ 127
                short    2바이트   +3만 정도
                int      4바이트   +- 21억 정도 (리터럴 정수)
                long     8바이트   +-21억 이상, 리터럴 뒤에 L/l
        [실수]   float    4바이트   소수점 8자리, 리터럴 뒤 F/f
                double   8바이트   소수점 17자리(리터럴 실수)
        [논리]   boolean  1바이트   true / false
        [문자]   char     1바이트   유니코드, ''작은따옴표로 감싼 문자
                String    클래스   클래스, ""큰따옴표로 감싼 긴 문자

[ 이스케이프/제어 문자 ]
    \n 줄바꿈
    \t 들여쓰기 (tab)
    \\ '\' 출력
    \' ' 출력
    \" " 출력

[ 변수 타입변환 = casting ]
        ☆★☆★☆★☆★☆★ Java는 다향성을 가짐
                        : 하나의 자료가 여러 개의 타입을 가질 수 있음 ☆★☆★☆★☆★☆★

    1. 자동 타입변환 (묵시적)
        byte > short / char > int > long > float > double
        (1) 메모리 크기 小 > 大 로 변환
        (2) 데이터 손실이 적다.

    2. 강제 타입변환 (명시적)
        double > float > long > int > short / char > byte
        (1) 메모리 크기 大 > 小로 변환
        (2) 데이터 손실이 크다. (발생할 수 있다.)
        (3) (변환할 타입명) 변수명;

    3. 연산 타입변환
        (1) int 이하의 연산결과는 int
            byte + byte = int
            byte + short = int
            int + int = int
        (2) int 이상에서는 연산 결과 두 개 중 더 큰 항으로 자동 타입변환

[ 연산자 ]
    1. 산술 연산자
        + - * / %(나머지)
    2. 연결 연산자
        "문자열" + 10 = 문자열 10
        피연산자 중에 문자열이 포함되면 산술이 아닌 문자열 연결
    3. 비교 연산자
        >  <  ==  !=
        결과를 boolean 으로 반환
    4. 논리 연산자
        && and, || or, ! not
    5. 증감 연상자
        변수 값에 1 증가 or 감소
        ++변수명 : 선위 증가
        변수명++ : 후위 증가
        --변수명 : 선위 감소
        변수명-- : 후위 감소
    6. (복합)대입연산자
        = 오른쪽 값을 왼쪽에 대입
        +=, -=, *=, /=, %= 오른쪽 값을 왼쪽 값에 대해 연산한 후 대입
    7. 삼항연산자
        조건 ? 참 : 거짓
        조건1 ? 참1 : 조건2 ? : 참2 : 거짓 vs if문
    8. 문자열 비교
        "문자열A".equals("문자열B")

[ 출력함수 ]
    1. System.out.print();
    2. System.out.println();
    3. System.out.printf("형식문자1 형식문자2", 값1, 값2);
        - 형식문자 : %s 문자열, %d 정수 ,%c 문자, %f 실수
        - 자릿수
            %자릿수d : 자릿수만큼 자리 차지, 만일 비어있으면 공백, 오른쪽 정렬
            %-자릿수d : 자릿수만큼 자리 차지, 비어있으면 공백, 왼쪽 정렬
            %0자릿수d : 자릿수만큼 자리 차지, 만일 비어있으면 0을 채움
        - 소수점 자릿수:
            %전체자릿수.소수점자릿수f : (소수점 포함) 전체 자릿수 만큼 자리 차지

[ 입력 함수 ]
        콘솔화면에서 자료를 입력받는 방법
    1. new Scanner( System.in ); : 시스템으로부터 입력 관련 기능을 제공하는 객체
    2. 종류
        .next()           : 입력받은 문자열(String) 반환 (단, 띄어쓰기 불가)
        .nextLine()       : 입력받은 문자열(String) 반환, 띄어쓰기 가능
            ※ 주의점
                nextLine() 앞에 다른 next()가 존재하면 enter(개행)를 포함하므로 문제 발생
                해결 : nextLine() 앞에 무의미한 nextLine()를 하나 추가
        .nextByte()       : 입력받은 정수(byte)를 반환
        .nextShort()      : 입력받은 정수(short)를 반환
        .nextInt()        : 입력받은 정수(int)를 반환
        .nextLong()       : 입력받은 정수(long)를 반환
        .nextFloat()      : 입력받은 실수(float)를 반환
        .nextDouble()     : 입력받은 실수(double)를 반환
        .nextBoolean()    : 입력받은 true/false를 반환
        * .nextChar()는 없음 ☆★☆★☆★☆★☆★
            >> char value8 = scan.next().charAt( 0 ) ;
            >> 입력받은 문자열 중에 첫번째[index 0] 글자를 반환

[ 조건문 if ]
    1. 형태
        (1) if( 조건문 ) 참 ;   : 단일 명령어
        (2) if( 조건문 ) {      : 명령어 다수
            참 1;
            참 2;};
        (3) if ( 조건문 ) { 참 }
            else { 거짓 };
        (4) 여러 조건에 하나의 결과
            if ( 조건문1 ) { 참1 }
            else if( 조건문2 ) { 참2 }
            else if( 조건문3 ) { 참3 }
            else { 거짓 };
        (5) 여러 조건에 여러 개의 결과
            if ( 조건문1 ) { 참1 };
            if ( 조건문2 ) { 참2 };
        (6) 중첩
            if ( 조건문1 ) {
            if ( 조건문2 ) {참2}
            else {거짓2}
            } else{ 거짓1 };

    2. 주의사항
        (1) 조건문은 true / false 만 가능
        (2) {} 중괄호
        (3) if(); << 하지 않도록 주의
        (4) if, if~else, if~else if는 하나의 결과만 반환

[ 반복문 ]
    1. 정의 : 조건에 따른 결과가 true 일때 코드를 반복 실행
    2. 형태
        for(초기값 ; 조건문 ; 증감식){ 실행문;}

        - 초기값 : 반복문에서 사용되는 변수  ex. int i = 0
        - 조건문 : 반복변수의 조건문        ex. i < 10
        - 증감식 : 반복변수의 증감          ex. i++
        - 실행문 : 조건 충족시 실행되는 코드/명령어;
    3. 실행순서
        초기값 > 조건문(true) > 실행문 > 증감식
              > 조건문(true) > 실행문 > 증감식
              > 조건문(false) >> 조건문 종료
    4. for 중첩 가능 : 상위 for문이 1회전 마다 하위 for문은 전체 회전
    5. 주요 키워드
        1) break;    : 가장 가까운 반복문 {} 종료/탈출
        2) continue; : 가장 가까운 반복문(증감식) 이동
    6. 무한루프
        1) for( ; ; ){ }
        2) while(true){ }

[ 배열 ]
    1. 정의 : 동일한 자료형(타입)의 여러 데이터를 순서대로 저장하는 타입
    2. 특징
        1) 동일한 타임 : 서로 다른 타입은 같은 배열에 저장 불가
        2) 고정 길이 : 한 번 생성된 배열의 길이 수정 불가
        3) 요소 초기값 : 입력된 값이 없다면, 아래 값으로 default
                        정수 0 / 실수 0.0 / 논리 false / 객체(배열) null
    3. 사용법
        1) 선언
            (1) new 타입[길이];             ex) int[] 변수명 = new int[3];
            (2) { 값1 , 값2 , 값3 }        ex) double[] 변수명 = { 3.14, 5.1, 78.69 }
        2) 호출
            (1) 변수명                     : 객체의 주소값 반환
            (2) Arrays.toString( 변수명 ); : 배열의 요소 갑 반환
            (3) 변수명[index]              : index는 0부터 시작
                변수명.length              : 배열의 길이
        3) 수정
            (1) 변수명 = new 타입[3]        : 전체 배열 수정
            (2) 변수명[index] = 새로운 값    : 특정 index 값 수정
        4) 삭제/추가
            특정 요소 삭제 기능이 존재하지 않음
            Java 배열은 고정길이이므로 중간에 요소 개수 변경 할 수 없음
        5) 배열과 반복문
            (1) 일반 for
                for( int index = 0 ; index < 변수명.length ; index++ ){
                    타입 변수명 = 배열변수명[index]
                }
            (2) 향상된 for 문
                - index 없이 배열 내 요소값을 하나씩 변수에 대입 반복
                for (타입 변수명 : 배열 변수명) {
                }
                // in JS
                    for ( let 변수명 : )

[ 클래스와 객체 ]
    java는 컴파일(번역)을 클래스 단위로 처리

    1) 정의
        (1) 객체
                : 행위의 영향을 받는 대상
        (2) 클래스
                : 객체를 만들기 위하여 객체를 정의하는 설계도
    2) 클래스
        (1) 멤버변수    : 객체 내에 포함되는 변수, 속성/특징/성질 = 값/데이트
        (2) 메소드      : 객체 내에 포함되는 함수, 이벤트/행위/작동 = 실행 명령어의 집합
        (3) 생성자      : 객체가 생성될 때의 초기화 함수
                          사용자가 커스텀해서 사용하므로 정해져있지 않음.
    3) 클래스 사용법
        (1) 선언
            ① java 파일 내에서 여러 개의 클래스를 선언(비추천)
            ② java 파일 내 클래스 1개만 존재하도록 개별 파일로 선언(권장)
            ```
            class 클래스명{
                멤버변수;
                메소드;
                생성자;
            }
            ```

    4) 객체 사용법
        (1) 선언
            new 클래스명();
            ex) 클래스명 변수명 = new 클래스명();
                ※ new 연산자 : 클래스를 기반으로 객체를 생성하며 메모리를 할당하는 키워드
        (2) 객체 내 멤버변수 호출
            변수명.멤버변수명
                ※ .(온점, 도트) 접근연산자 : 객체 내에 포함된 멤버변수, 메소드 등에 접근하는 키워드
        (3) 객체 내 멤버변수 값 수정
            변수명.멤버변수명 = 새로운 값
        (4) 객체 내에 멤버변수 추가/삭제 불가
                : 클래스는 컴파일(실행/번역)된 이후에는 수정 불가!!

[ 메소드 ]
    : 메소드 = 멤버변수
    1. 정의
        하나의 기능을 수행하는 일련의 코드/명령어
    2. 선언
    ```java
        반환타입 메소드명 ( 타입 매개변수1, 타입 매개변수2 ){
            실행코드
            return 반환값; (반환값이 없으면 생략 가능 = void)
        };
    ```
    3. 용어 정리
        - 인수(인자)값  : 메소드 호출 시 메소드에 전달되는 값
        - 매개변수      : 메소드 실행 시, 메소드로 인수값으로부터 들어오는 값
            * 없을 수도 있음
            * 반드시! 인수 값의 타입과 매개변수의 타입이 일치해야 함
        - 반환값       : 메소드 실행 후 결과값
            * 반드시! 반환값의 타입과 반환타입이 일치
            * 반환값은 1개만 가능
            * 반환값이 없을 때는 [ void ] 반환타입 키워드 사용
        - 반환타입     : 메소드 실행 후 결과인 반환값의 타입
        - 메소드명     : 임의의 기능명칭 (카멜표기법 권장)

    4. 호출
        (방법 1) 실행 클래스와 메소드의 클래스가 별도로 존재하여, 실행 클래스에서 메소드를 호출할 때
            1) 클래스명 변수명 = new 클래스명();    // 객체 생성
            2) 변수명.메소드명();                  // 객체를 통한 메소드 호출
            3) 타입명 매개변수 = 변수명.메소드명();  // 메소드의 반환값을 매개변수에 저장

        (방법 2) 동일한 클래스에 선언된 메소드를 호출
            1) 메소드명(인수);

[ 생성자 ]
    1. 정의
        : 객체를 생성할 때 사용되는 초기화를 담당하는 메소드
        클래스명 변수명 = new 생성자명();
    2. 규칙
        1) 클래스명 = 생성자명 (must!!)
            * 클래스명 ≠ 생성자명 : 메소드
        2) overload vs override
            overload :
                    변수명/식별자는 동일한 이름을 가질 수 없음 → 메소드/생성자는 동일한 이름으로 여러 개 만들 수 없음.
                    ** But, 메소드/생성자는 매개변수의 개수/타입/순서가 다르다면
                    동일한 이름으로 여러 개의 메소드/생성자를 선언할 수 있음**
                    ~~why? 객체의 멤버변수는 객체마다 할당되며, 객체의 메소드는 객체 모두에게 공유됨~~
            override :
                    상속관계에 있는 클래스 간에 같은 이름의 메소드를 정의하는 기술
                    만약 자식클래스가 부모클래스에서 선언된 것과 같은 메소드를 가지는 것
    3. 종류
        1) 기본 생성자
            정의 : 생성자명( ){ }
            사용 : new 생성자명();
        2) 매개변수가 있는 생성자
            정의 : 생성자명( 타입 매개변수명, 타입 매개변수명 ){}
        3) 생성자 오버로드
            정의 : 생성자명( 타입 매개변수명, 타입 매개변수명, 타입 매개변수명 ){}
                    // 2번 vs 3번
                    // 매개변소의 타입/순서/개수가 다르므로 생성자가 overload 되었음!

    ※ 생성자 자동 생성 방법
    마우스 우클릭 > Generate... > Constructor > 매개변수 선택 > OK