[ 기본타입 ]
    1. 정의 : 자료들의 분류
    2. 목적 : 효율적인 자료 처리
    3. 종류 : 8가지
        [정수]   byte     1바이트    -128 ~ 127
                short    2바이트   +3만 정도
                int      4바이트   +- 21억 정도 (리터럴 정수)
                long     8바이트   +-21억 이상, 리터럴 뒤에 L/l
        [실수]   float    4바이트   소수점 8자리, 리터럴 뒤 F/f
                double   8바이트   소수점 17자리(리터럴 실수)
        [논리]   boolean  1바이트   true / false
        [문자]   char     1바이트   유니코드, ''작은따옴표로 감싼 문자
                String    클래스   클래스, ""큰따옴표로 감싼 긴 문자

[ 출력함수 ]
    1. System.out.print();
    2. System.out.println();
    3. System.out.printf("형식문자1 형식문자2", 값1, 값2);
        - 형식문자 : %s 문자열, %d 정수 ,%c 문자, %f 실수
        - 자릿수
            %자릿수d : 자릿수만큼 자리 차지, 만일 비어있으면 공백, 오른쪽 정렬
            %-자릿수d : 자릿수만큼 자리 차지, 비어있으면 공백, 왼쪽 정렬
            %0자릿수d : 자릿수만큼 자리 차지, 만일 비어있으면 0을 채움
        - 소수점 자릿수:
            %전체자릿수.소수점자릿수f : (소수점 포함) 전체 자릿수 만큼 자리 차지

[ 이스케이프/제어 문자 ]
    \n 줄바꿈
    \t 들여쓰기 (tab)
    \\ '\' 출력
    \' ' 출력
    \" " 출력

[ 변수 타입변환 = casting ]
        ☆★☆★☆★☆★☆★ Java는 다향성을 가짐
                        : 하나의 자료가 여러 개의 타입을 가질 수 있음 ☆★☆★☆★☆★☆★

    1. 자동 타입변환 (묵시적)
        byte > short / char > int > long > float > double
        (1) 메모리 크기 小 > 大 로 변환
        (2) 데이터 손실이 적다.

    2. 강제 타입변환 (명시적)
        double > float > long > int > short / char > byte
        (1) 메모리 크기 大 > 小로 변환
        (2) 데이터 손실이 크다. (발생할 수 있다.)
        (3) (변환할 타입명) 변수명;

    3. 연산 타입변환
        (1) int 이하의 연산결과는 int
            byte + byte = int
            byte + short = int
            int + int = int
        (2) int 이상에서는 연산 결과 두 개 중 더 큰 항으로 자동 타입변환

[ 입력 함수 ]
        콘솔화면에서 자료를 입력받는 방법
    1. new Scanner( System.in ); : 시스템으로부터 입력 관련 기능을 제공하는 객체
    2. 종류
        .next()           : 입력받은 문자열(String) 반환 (단, 띄어쓰기 불가)
        .nextLine()       : 입력받은 문자열(String) 반환, 띄어쓰기 가능
            ※ 주의점
                nextLine() 앞에 다른 next()가 존재하면 enter(개행)를 포함하므로 문제 발생
                해결 : nextLine() 앞에 무의미한 nextLine()를 하나 추가
        .nextByte()       : 입력받은 정수(byte)를 반환
        .nextShort()      : 입력받은 정수(short)를 반환
        .nextInt()        : 입력받은 정수(int)를 반환
        .nextLong()       : 입력받은 정수(long)를 반환
        .nextFloat()      : 입력받은 실수(float)를 반환
        .nextDouble()     : 입력받은 실수(double)를 반환
        .nextBoolean()    : 입력받은 true/false를 반환
        * .nextChar()는 없음 ☆★☆★☆★☆★☆★
            >> char value8 = scan.next().charAt( 0 ) ;
            >> 입력받은 문자열 중에 첫번째[index 0] 글자를 반환

[ 연산자 ]
    1. 산술 연산자
        + - * / %(나머지)
    2. 연결 연산자
        "문자열" + 10 = 문자열 10
        피연산자 중에 문자열이 포함되면 산술이 아닌 문자열 연결
    3. 비교 연산자
        >  <  ==  !=
        결과를 boolean 으로 반환
    4. 논리 연산자
        && and, || or, ! not
    5. 증감 연상자
        변수 값에 1 증가 or 감소
        ++변수명 : 선위 증가
        변수명++ : 후위 증가
        --변수명 : 선위 감소
        변수명-- : 후위 감소
    6. (복합)대입연산자
        = 오른쪽 값을 왼쪽에 대입
        +=, -=, *=, /=, %= 오른쪽 값을 왼쪽 값에 대해 연산한 후 대입
    7. 삼항연산자
        조건 ? 참 : 거짓
        조건1 ? 참1 : 조건2 ? : 참2 : 거짓 vs if문
    8. 문자열 비교
        "문자열A".equals("문자열B")

[ 조건문 if ]
    1. 형태
        (1) if( 조건문 ) 참 ;   : 단일 명령어
        (2) if( 조건문 ) {      : 명령어 다수
            참 1;
            참 2;};
        (3) if ( 조건문 ) { 참 }
            else { 거짓 };
        (4) 여러 조건에 하나의 결과
            if ( 조건문1 ) { 참1 }
            else if( 조건문2 ) { 참2 }
            else if( 조건문3 ) { 참3 }
            else { 거짓 };
        (5) 여러 조건에 여러 개의 결과
            if ( 조건문1 ) { 참1 };
            if ( 조건문2 ) { 참2 };
        (6) 중첩
            if ( 조건문1 ) {
            if ( 조건문2 ) {참2}
            else {거짓2}
            } else{ 거짓1 };

    2. 주의사항
        (1) 조건문은 true / false 만 가능
        (2) {} 중괄호
        (3) if(); << 하지 않도록 주의
        (4) if, if~else, if~else if는 하나의 결과만 반환