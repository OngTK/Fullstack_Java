[ 기본타입 ]
    1. 정의 : 자료들의 분류
    2. 목적 : 효율적인 자료 처리
    3. 종류 : 8가지
        [정수]   byte     1바이트    -128 ~ 127
                short    2바이트   +3만 정도
                int      4바이트   +- 21억 정도 (리터럴 정수)
                long     8바이트   +-21억 이상, 리터럴 뒤에 L/l
        [실수]   float    4바이트   소수점 8자리, 리터럴 뒤 F/f
                double   8바이트   소수점 17자리(리터럴 실수)
        [논리]   boolean  1바이트   true / false
        [문자]   char     1바이트   유니코드, ''작은따옴표로 감싼 문자
                String    클래스   클래스, ""큰따옴표로 감싼 긴 문자

[ 이스케이프/제어 문자 ]
    \n 줄바꿈
    \t 들여쓰기 (tab)
    \\ '\' 출력
    \' ' 출력
    \" " 출력

[ 변수 타입변환 = casting ]
        ☆★☆★☆★☆★☆★ Java는 다향성을 가짐
                        : 하나의 자료가 여러 개의 타입을 가질 수 있음 ☆★☆★☆★☆★☆★

    1. 자동 타입변환 (묵시적)
        byte > short / char > int > long > float > double
        (1) 메모리 크기 小 > 大 로 변환
        (2) 데이터 손실이 적다.

    2. 강제 타입변환 (명시적)
        double > float > long > int > short / char > byte
        (1) 메모리 크기 大 > 小로 변환
        (2) 데이터 손실이 크다. (발생할 수 있다.)
        (3) (변환할 타입명) 변수명;

    3. 연산 타입변환
        (1) int 이하의 연산결과는 int
            byte + byte = int
            byte + short = int
            int + int = int
        (2) int 이상에서는 연산 결과 두 개 중 더 큰 항으로 자동 타입변환

[ 연산자 ]
    1. 산술 연산자
        + - * / %(나머지)
    2. 연결 연산자
        "문자열" + 10 = 문자열 10
        피연산자 중에 문자열이 포함되면 산술이 아닌 문자열 연결
    3. 비교 연산자
        >  <  ==  !=
        결과를 boolean 으로 반환
    4. 논리 연산자
        && and, || or, ! not
    5. 증감 연상자
        변수 값에 1 증가 or 감소
        ++변수명 : 선위 증가
        변수명++ : 후위 증가
        --변수명 : 선위 감소
        변수명-- : 후위 감소
    6. (복합)대입연산자
        = 오른쪽 값을 왼쪽에 대입
        +=, -=, *=, /=, %= 오른쪽 값을 왼쪽 값에 대해 연산한 후 대입
    7. 삼항연산자
        조건 ? 참 : 거짓
        조건1 ? 참1 : 조건2 ? : 참2 : 거짓 vs if문
    8. 문자열 비교
        "문자열A".equals("문자열B")

[ 출력함수 ]
    1. System.out.print();
    2. System.out.println();
    3. System.out.printf("형식문자1 형식문자2", 값1, 값2);
        - 형식문자 : %s 문자열, %d 정수 ,%c 문자, %f 실수
        - 자릿수
            %자릿수d : 자릿수만큼 자리 차지, 만일 비어있으면 공백, 오른쪽 정렬
            %-자릿수d : 자릿수만큼 자리 차지, 비어있으면 공백, 왼쪽 정렬
            %0자릿수d : 자릿수만큼 자리 차지, 만일 비어있으면 0을 채움
        - 소수점 자릿수:
            %전체자릿수.소수점자릿수f : (소수점 포함) 전체 자릿수 만큼 자리 차지

[ 입력 함수 ]
        콘솔화면에서 자료를 입력받는 방법
    1. new Scanner( System.in ); : 시스템으로부터 입력 관련 기능을 제공하는 객체
    2. 종류
        .next()           : 입력받은 문자열(String) 반환 (단, 띄어쓰기 불가)
        .nextLine()       : 입력받은 문자열(String) 반환, 띄어쓰기 가능
            ※ 주의점
                nextLine() 앞에 다른 next()가 존재하면 enter(개행)를 포함하므로 문제 발생
                해결 : nextLine() 앞에 무의미한 nextLine()를 하나 추가
        .nextByte()       : 입력받은 정수(byte)를 반환
        .nextShort()      : 입력받은 정수(short)를 반환
        .nextInt()        : 입력받은 정수(int)를 반환
        .nextLong()       : 입력받은 정수(long)를 반환
        .nextFloat()      : 입력받은 실수(float)를 반환
        .nextDouble()     : 입력받은 실수(double)를 반환
        .nextBoolean()    : 입력받은 true/false를 반환
        * .nextChar()는 없음 ☆★☆★☆★☆★☆★
            >> char value8 = scan.next().charAt( 0 ) ;
            >> 입력받은 문자열 중에 첫번째[index 0] 글자를 반환

[ 조건문 if ]
    1. 형태
        (1) if( 조건문 ) 참 ;   : 단일 명령어
        (2) if( 조건문 ) {      : 명령어 다수
            참 1;
            참 2;};
        (3) if ( 조건문 ) { 참 }
            else { 거짓 };
        (4) 여러 조건에 하나의 결과
            if ( 조건문1 ) { 참1 }
            else if( 조건문2 ) { 참2 }
            else if( 조건문3 ) { 참3 }
            else { 거짓 };
        (5) 여러 조건에 여러 개의 결과
            if ( 조건문1 ) { 참1 };
            if ( 조건문2 ) { 참2 };
        (6) 중첩
            if ( 조건문1 ) {
            if ( 조건문2 ) {참2}
            else {거짓2}
            } else{ 거짓1 };

    2. 주의사항
        (1) 조건문은 true / false 만 가능
        (2) {} 중괄호
        (3) if(); << 하지 않도록 주의
        (4) if, if~else, if~else if는 하나의 결과만 반환

[ 반복문 ]
    1. 정의 : 조건에 따른 결과가 true 일때 코드를 반복 실행
    2. 형태
        for(초기값 ; 조건문 ; 증감식){ 실행문;}

        - 초기값 : 반복문에서 사용되는 변수  ex. int i = 0
        - 조건문 : 반복변수의 조건문        ex. i < 10
        - 증감식 : 반복변수의 증감          ex. i++
        - 실행문 : 조건 충족시 실행되는 코드/명령어;
    3. 실행순서
        초기값 > 조건문(true) > 실행문 > 증감식
              > 조건문(true) > 실행문 > 증감식
              > 조건문(false) >> 조건문 종료
    4. for 중첩 가능 : 상위 for문이 1회전 마다 하위 for문은 전체 회전
    5. 주요 키워드
        1) break;    : 가장 가까운 반복문 {} 종료/탈출
        2) continue; : 가장 가까운 반복문(증감식) 이동
    6. 무한루프
        1) for( ; ; ){ }
        2) while(true){ }

[ 배열 ]
    1. 정의 : 동일한 자료형(타입)의 여러 데이터를 순서대로 저장하는 타입
    2. 특징
        1) 동일한 타입 : 서로 다른 타입은 같은 배열에 저장 불가
        2) 고정 길이 : 한 번 생성된 배열의 길이 수정 불가
        3) 요소 초기값 : 입력된 값이 없다면, 아래 값으로 default
                        정수 0 / 실수 0.0 / 논리 false / 객체(배열) null
    3. 사용법
        1) 선언
            (1) new 타입[길이];             ex) int[] 변수명 = new int[3];
            (2) { 값1 , 값2 , 값3 }        ex) double[] 변수명 = { 3.14, 5.1, 78.69 }
        2) 호출
            (1) 변수명                     : 객체의 주소값 반환
            (2) Arrays.toString( 변수명 ); : 배열의 요소 갑 반환
            (3) 변수명[index]              : index는 0부터 시작
                변수명.length              : 배열의 길이
        3) 수정
            (1) 변수명 = new 타입[3]        : 전체 배열 수정
            (2) 변수명[index] = 새로운 값    : 특정 index 값 수정
        4) 삭제/추가
            특정 요소 삭제 기능이 존재하지 않음
            Java 배열은 고정길이이므로 중간에 요소 개수 변경 할 수 없음
        5) 배열과 반복문
            (1) 일반 for
                for( int index = 0 ; index < 변수명.length ; index++ ){
                    타입 변수명 = 배열변수명[index]
                }
            (2) 향상된 for 문
                - index 없이 배열 내 요소값을 하나씩 변수에 대입 반복
                for (타입 변수명 : 배열 변수명) {
                }
                // in JS
                    for ( let 변수명 : )

[ 클래스와 객체 ]
    java는 컴파일(번역)을 클래스 단위로 처리

    1) 정의
        (1) 객체
                : 행위의 영향을 받는 대상
        (2) 클래스
                : 객체를 만들기 위하여 객체를 정의하는 설계도
    2) 클래스
        (1) 멤버변수    : 객체 내에 포함되는 변수, 속성/특징/성질 = 값/데이트
        (2) 메소드      : 객체 내에 포함되는 함수, 이벤트/행위/작동 = 실행 명령어의 집합
        (3) 생성자      : 객체가 생성될 때의 초기화 함수
                          사용자가 커스텀해서 사용하므로 정해져있지 않음.
    3) 클래스 사용법
        (1) 선언
            ① java 파일 내에서 여러 개의 클래스를 선언(비추천)
            ② java 파일 내 클래스 1개만 존재하도록 개별 파일로 선언(권장)
            ```
            class 클래스명{
                멤버변수;
                메소드;
                생성자;
            }
            ```

    4) 객체 사용법
        (1) 선언
            new 클래스명();
            ex) 클래스명 변수명 = new 클래스명();
                ※ new 연산자 : 클래스를 기반으로 객체를 생성하며 메모리를 할당하는 키워드
        (2) 객체 내 멤버변수 호출
            변수명.멤버변수명
                ※ .(온점, 도트) 접근연산자 : 객체 내에 포함된 멤버변수, 메소드 등에 접근하는 키워드
        (3) 객체 내 멤버변수 값 수정
            변수명.멤버변수명 = 새로운 값
        (4) 객체 내에 멤버변수 추가/삭제 불가
                : 클래스는 컴파일(실행/번역)된 이후에는 수정 불가!!

[ 메소드 ]
    : 메소드 = 멤버변수
    1. 정의
        하나의 기능을 수행하는 일련의 코드/명령어
    2. 선언
    ```java
        반환타입 메소드명 ( 타입 매개변수1, 타입 매개변수2 ){
            실행코드
            return 반환값; (반환값이 없으면 생략 가능 = void)
        };
    ```
    3. 용어 정리
        - 인수(인자)값  : 메소드 호출 시 메소드에 전달되는 값
        - 매개변수      : 메소드 실행 시, 메소드로 인수값으로부터 들어오는 값
            * 없을 수도 있음
            * 반드시! 인수 값의 타입과 매개변수의 타입이 일치해야 함
        - 반환값       : 메소드 실행 후 결과값
            * 반드시! 반환값의 타입과 반환타입이 일치
            * 반환값은 1개만 가능
            * 반환값이 없을 때는 [ void ] 반환타입 키워드 사용
        - 반환타입     : 메소드 실행 후 결과인 반환값의 타입
        - 메소드명     : 임의의 기능명칭 (카멜표기법 권장)

    4. 호출
        (방법 1) 실행 클래스와 메소드의 클래스가 별도로 존재하여, 실행 클래스에서 메소드를 호출할 때
            1) 클래스명 변수명 = new 클래스명();    // 객체 생성
            2) 변수명.메소드명();                  // 객체를 통한 메소드 호출
            3) 타입명 매개변수 = 변수명.메소드명();  // 메소드의 반환값을 매개변수에 저장

        (방법 2) 동일한 클래스에 선언된 메소드를 호출
            1) 메소드명(인수);

[ 생성자 ]
    1. 정의
        : 객체를 생성할 때 사용되는 초기화를 담당하는 메소드
        클래스명 변수명 = new 생성자명();
    2. 목적
        - 객체 생성시 멤버변수의 초기화
        - 유효성 검사
    3. 규칙
        1) 클래스명 = 생성자명 (must!!)
            * 클래스명 ≠ 생성자명 : 메소드
        2) overload 가능
            overload :
                    변수명/식별자는 동일한 이름을 가질 수 없음 → 메소드/생성자는 동일한 이름으로 여러 개 만들 수 없음.
                    ** But, 메소드/생성자는 매개변수의 개수/타입/순서가 다르다면
                    동일한 이름으로 여러 개의 메소드/생성자를 선언할 수 있음**
                    ~~why? 객체의 멤버변수는 객체마다 할당되며, 객체의 메소드는 객체 모두에게 공유됨~~
            override :
                    상속관계에 있는 클래스 간에 같은 이름의 메소드를 정의하는 기술
                    만약 자식클래스가 부모클래스에서 선언된 것과 같은 메소드를 가지는 것
    4. 종류
        1) 기본 생성자
            정의 : 생성자명( ){ }
            특징 : 매개변수가 없음
            사용 : new 생성자명();
        2) 매개변수가 있는 생성자
            정의 : 생성자명( 타입 매개변수명, 타입 매개변수명 ){}
        3) 생성자 오버로드
            정의 : 생성자명( 타입 매개변수명, 타입 매개변수명, 타입 매개변수명 ){}
                    // 2번 vs 3번
                    // 매개변소의 타입/순서/개수가 다르므로 생성자가 overload 되었음!
    5. 사용
        1) 선언
            class 클래스명{
                생성자명( ){ }
            }
            class 클래스명{
                생성자명( 타입 매개변수명, 타입 매개변수명 ){ }
            }

        2) 호출/사용 방법
            new 생성자명( );
            new 생성자명( 매개변수, 매개변수 );

※ 생성자 자동 생성 방법
    마우스 우클릭 > Generate... > Constructor > 매개변수 선택 > OK
※ this.멤버변수
    현재 메소드/생성자를 호출한 객체를 가리킴
    일반적으로 멤버변수명과 매개변수명이 동일하여 this를 쓰는 경우가 많음

[ 접근 제한자 ]
    1. 정의
        클래스, 멤버변수, 생성자, 메소드 등에 접근하는 것을 제한하기 위한 키워드
        실무 시, 보안 필요 or 보안이 필요한 경우 사용
    2. 종류
        1) public
            공개
            프로젝트 폴더 내 어디서든 접근 가능
        2) private
            비공개
            현재 class 내에서만 접근 가능
            일반적으로 Class를 private 처리할 수 없음,
            일반적으로 멤버변수는 private 처리
        3) default
            기본
            접근 제한자를 선언하지 않으면 기본으로 defualt 제한자로 인식
            같은·하위 패키지에서만 접근 가능
        4) protected
            같은·하위 패키지에서만 접근 가능, 단 상속 관계에서는 예외
            ※ 추후 자세히 다룰 예정
    3. 사용
        타입 앞에 기재
        1) 멤버변수에 타입 앞에 기재
            `접근제한자 타입 변수명;`
        2) 생성자명 앞에 기재
            `접근제한자 생성자명( ){ };`
        3) 클래스명 앞에 기재
            `접근제한자 class 클래스명{ }`
        4) 메소드명 반환타입 앞에 기재
            `접근제한자 반환타입 메소드명( ){ }`

[ 패키지 ]
    1. 정의
        폴더와 같은 개념으로 파일들을 저장하는 공간, 일종의 식별자
        동일한 패키지 내에 class 명 중복은 불가함
    2. 사용
        import : 다른 패키지의 class를 불러올 때, class내 상단에 자동 완성으로 작성됨
        ex) import 경로.패키지명.클래스명;
        동일한 패키지 내에서는 import 필요X

        단, java.lang 패키지는 예외/생략가능
            ex) System class, String class etc.

[ 상수 ]
    변하지 않는 변수
    1. 사용법
        static final 타입 상수명;
    2. 주의
        수정 불가
        프로그램 내에서 단 1개만 존재 가능
        상수명을 전체 대문자로 명명

[ final ]
    1. 수정 불가능한 상태 = 고정 상태 정의하는 키워드
    2. 사용법
        final 타입 멤버변수명
    3. 주의
        초기값은 필수

[ static ]
    1. 실행 중에 변화가 없는 상태를 정의하는 키워드
        = 프로젝트 컴파일 시 메모리에 할당되고, 종료시 메모리가 삭제되는 키워드
    2. 사용법
        static 타입 멤버변수 >> static 변수·정적변수·공유변수·전역변수
    3. 주의
        멤버변수 = 객체 내 변수 VS static = 객체 외 변수(우선 할당)
        메모리 할당 시점 : new 선언 VS static 자체

        프로그램 내에서 단 1개만 존재하는 변수를 선언할 때 사용,
        서로 다른 객체들이 공유하여 사용

    4. 호출
        클래스명.정적변수명;

    5. static 유무가 중요한 이유☆★☆★
        static으로 선언된 메소드는 동일한 클래스 내 다른 메소드를 호출할 수 없음.

        enable ex)
        ```
        class Text{
            void main2(){}
            static main3(){}
            static void main(){
                main2() // 불가능 : main-메모리가 할당되어 있음 / main2-메모리가 할당되어 있지 않음! >> 따라서 main2 메소드를 실행할 수 없음
                main3() // 가능 : main, main3 모두 메모리가 할당되어 있으므로, main3 메소드 실행 가능

                new Text().main2()
                    // 가능 : 클래스 전체에 대한 할당/객체 생성 후 main 2 메소드를 선언함
                              >> main, main2에 모두 메모리가 할당되어 있으므로, main2 메소드 실행 가능
            }
        }
        ```



[ getter and setter ]
    1. 정의
        클래스 내 private 멤버변수를 다른 클래스에서 사용할 수 있도록 정의하는 메소드
    2. 명명
        1) 저장/대입 목적
            public void set멤버변수명( 타입 매개변수 ){
                this.멤버변수명 = 매개변수;
            };
        2) 호출/반환 목적
            public 반환타입 get멤버변수명( ){
                return 멤버변수명;
            }

[ 주요 키워드 ]
    1. 접근 제한자 : 다른 클래스가 특정한 클래스에 접근할 때, 접근권한을 제한하는 키워드
        1) public : 모든 클래스에서 접근 가능
        2) private : 현재 클래스에서만 접근 가능
        3) default : 같은 패키지에서만 접근 가능, 키워드 생략 가능
        4) protected : 같은 패키지에서만 접근 가능, 단, 상속관계 예외
    2. 클래스 불러오기
        1) import : 현재 클래스에서 다른 패키지의 클래스를 불러올 때 사용, (라이브러리 사용시 흔히 import를 볼 수 있음)
    3. 상수
        1) final : 초기화 선언 이후에는 수정이 블가
        2) static : 프로그램 실행시 메모리가 우선 할당되고 프로그램 종료 시 삭제, 객체 없이 이용 가능

[ 관례적 용어 ]
    1. getter · setter
        멤버변수가 private로 선언되었을 경우,
        다른 클래스에서 해당 private 멤버변수를 읽고 쓸데 사용되는 간접접근 메소드
    2. public static final (상수)
        프로그램 내 유일한 존재일 경우 선언


[ 용어 ]
    1. 변수 선언위치에 따른 용어 구분
        1) 멤버변수 : 객체 속성
            class 클래스명{
            String 멤버변수;
            }
        2) 지역변수 : 메소드 안에서 선언된 변수 (메소드 밖에서는 사용할 수 없음)
            class 클래스명{
                void 메소드(){
                    지역변수;
                }
            }
        3) 매개변수 : 메소드 호출 시 인수/인자값이 저장되어있는 변수
            class 클래스명{
                void 메소드( 매개변수 )
                }
        4) 정적변수 : 멤버변수 앞에 static이 선언된 변수
            class 클래스명{
                static String 정적변수;
            }

    2.
        class
            객체를 생성하기 위한 설계도
            계획일 뿐 실체는 없음
        object(객체)
            속성(멤버변수, 데이터)과 기능(메소드)를 갖는 물질(형태) = 논리적 개념
        instance
            속성과 기능을 생성한 물질(형태) = 물질적 개념

        ```
        Car car = new Car()

        Car : class
        new Car() 의 결과물 : instance
        ```
[ 디자인 패턴 ]
>> 디자인 패턴 txt 파일 참고

[ 데이터 베이스 ]
>> database txt 참고

[ ArrayList ]
    : Java에서 제공하는 클래스
    1. 정의
        컬렉션 프레임워크 중 리스트 자료형 클래스
    2. 목적
        가변 길이의 배열을 지원
    3. 사용법
        1) 선언
            ArrayList< 항목타입 > 변수명 = new ArrayList<>();
            * <제너릭타입> : 리스트에 저장할 항목/요소의 타입
        2) 추가·삽입
            (1) 변수명.add( 요소값 );
                : 마지막 인덱스 뒤로 요소 추가
            (2) 변수명.add( index, 요소값 );
                : 지정한 index에 요소를 삽입하고, 기존 요소들은 한 index 씩 뒤로 밀림
        3) 수정
                변수명.set( index, 요소값 );
                : 지정한 index를 새로운 요소값으로 수정
        4) 리스트 크기
                변수명.size( );
        5) 특정 요소 반환
                변수명.get( index );
        6) 삭제
                변수명.remove( index );
    4. 리스트와 반복문
        1) 일반 반복문
            for (int i = 0 ; i < 변수명.size() ; i++) {
            변수명.get(i);
            }
        2) 향상된 for
            for ( 타입명 변수명 : 리스트변수명 ){
            변수명;
            }

[ 상속 ]
    1) 정의
        부모 클래스로 부터 하위 클래스에게 멤버변수, 메소드를 물려주는 행위
    2) 목적
        한 번 만든 클래스 재사용·활용을 위하여
    3) 키워드 : extends (확장·연장)
    4) 특징
        - 유지보수가 편리
        - 계층 표현이 가능
        - 재사용
        - ☆★ **다형성** ☆★
    5) 사용법
        `class 하위클래스 extends 상위클래스{ }`
    6) 주의
        - 상위 클래스는 1개만 존재할 수 있음
        - 하위 클래스가 상위 클래스를 선택
    7) 활용
        - 웹/앱 라이브러리
        - 클래스 간의 멤버변수 중복 시, (클래스 설계에서 미리 잡아두는게 좋음)

[ 다형성_타입변환]
    1) 자동(묵시적) 타입변환
        (1) 기본타입
            byte > short > int > long > float > double
        (2) 참조타입
            하위클래스 타입 > 상위클래스 타입
            `class 하위 extents 상위` 상속 관계일 때 만, 가능
    2) 강제(명시적) 타입변환
        (1) 기본타입
            double > float > long > int > short > byte
        (2) 참조타입
            상위클래스 타입 > 하위클래스 타입
            단, 이전에 **하위>상위 변환**이 있었던 객체에 한해서만 가능
            ```
                하위 obj1 = new 하위();     // 최초 타입 : 하위
                상위 obj2 = obj1;           // 상속에 따라 하위 >> 상위
                하위 obj3 = (하위)obj2;     // 최초 타입과 일치한다면, 상위>>하위로 강제 타입 변환

[ 인터페이스 ]
    1) 정의
        서로 다른 시스템이나 장치 사이에서 정보를 주고 받는 접점·경계면
    2) 인터페이스 예시
        키보드 : 게임 시 기능 / 문서작업 시 기능 등 프로그램은 다르지만 하나의 키보드로 조작 가능
        리모콘 : 서로 다른 모델/제조사의 TV를 하나의 리모콘으로 조작 가능
        키오스크 : 식당/편의점/병원 등 사용처는 다르지만 동일한 기계로 사용은 가능
    3) 목적
        서로 다른 장치 사이에, 동일한 목적을 달성하기 위해, 서로 다른 기능을 작동하게 하는 것 (호환성)
    4) 특징
        - 객채간의 교환성(호환성)을 높이고, 다형성을 구현
        - 서로 다른 클래스들 사이에 중간 매개체 역할
    5) 선언
        (1) 선언할 패키지 우클릭 > new > java class > Interface
        (2) 첫글자를 대문자로 하여 Interface 파일 생성
    6) 인터페이스 타입의 멤버
        ※ 멤버변수, 생성자, 메소드 사용 불가능!!
        (1) 상수
            - 반드시 초기값이 필요
            - 상수이므로 `public static final` 키워드가 필요하나 자동으로 포함되므로 생략 가능
        (2) 추상메소드
            - 실행문`{}`이 없는 메소드
            - `abstract` 키워드가 필요하나 자동으로 포함되므로 생략 가능
            - 추상메소드의 실행문은 implements·구현 class 에서 작성
    7)                  상속               VS        구현(인터페이스)
    - 키워드 :         extends                         Implements
    - 객체생성 :          O                                 X
    - 상위 :          하나의 상위클래스                다수의 인터페이스
    - 메소드 :      **선택적 오버라이딩**            **필수적 오버라이딩**
    - 멤버 :       멤버변수, 생성자, 메소드             상수, 추상메소드
    8) 구현 객체 (추상메소드 구현을 위한 class)

    9) 익명 구현체


[ 예외 처리 ]
1) 예외
    - 개발자가 구현한 로직이나 사용자 영향으로 발생한 문제

    ※ 시스템 오류
        - 시스템이 종료되는 심각한 수준의 문제

2) 예외의 종류
    (1) 일반 예외
        - 컴파일(실행)될 때, 예외 처리 코드 여부 검사, 즉 인위적으로 발생시킨 예외
        - 입출력, 네트워크, 파일, JBDC, 등 외부와 연동 시, 주로 사용
        - ex)
        Class.forName( 클래스경로 );    : 해당 경로의 클래스 유무를 확인하는 함수
        Thread.sleep( 미리초 );        : 1000 미리초(1초)간 thread가 sleep(정지)
    (2) 실행 예외
        - 컴파일(실행)될 때, 예외 처리 코드 여부 검사를 하지 않고 발생하는 예외
        - 개발자의 경험 의존도가 높음
3) 특징
    - 예외 발생시, 예외를 고치는 것이 아닌 흐름을 제어
    - 프로그램의 24시간 중단 없이 실행하기 위한 안전한 로직 구현을 위해 사용
4) 예외 클래스
    ClassNotFoundException : 클래스를 찾지 못하였을 때, 예외 발생 정보를 저장하는 클래스
    InterruptedException : 흐름이 중단되었을 때, 예외 발생 정보를 저장하는 클래스
    NullPointerException
    NumberFormatException
    ArrayIndexOutOfBoundsException
    InputMismatchException

    Exception : 모든 예외들의 상위 클래스(SuperClass)

5) 사용법
    try { '예외가 발생할 것 같은 코드 or 일반예외' }
    catch( 예외클래스명 매개변수명 ){ `예외발생시 실행문` }
    catch(){}
    finally{} : 예외 유무와 상관없이 무조건 실행

[ 예외 던지기 ]
예외 발생 시, 메소드를 호출한 곳으로 예외를 전달(return)

한 곳에서 예외처리를 하기 위해 메소드 내부에서 발생한 예외를 다른 곳으로 이동·전달·리턴할 수 있음


[ 파일 입·출력 클래스 ] ☆★☆★☆★☆★☆★☆★☆★복습필요!!!
※ 예외처리 주의
    1) FileOutputStream
        쓰기/출력/내보내기(Java > web)
        (1) .write( 바이트배열 )
            바이트 배열을 지정된 파일에 작성하는 함수
    2) FileInputStream
        읽기/입력/가져오기(web > Java)
        (2) .read( 바이트배열 )
            바이트 배열에서 읽어온 파일들을 저장하는 함수


[ OpenCSV ]
자바에서 CSV 파일 읽기, 쓰기를 편하게 해주는 API들을 제공하는 라이브러리
https://mvnrepository.com/ : java 관련 라이브러리를 제공하는 web site

라이브러리 등록 방법
jar 파일을 원하는 package로 이동 > 우클릭 > add as library

new CSVReader( new FileReader( 경로 ) ) : CSV를 입력하는 클래스
     .readAll() : List<String[]> 타입으로 반환하는 함수

new CSVWriter( new FileWriter( 경로 ) ) : CSV 출력하는 클래스
     .writeAll( List객체 ) : List 객체를 CSV로 내보내는 함수

[ JDBC ]
    Java DataBase Connect

    1) 라이브러리 준비
        : JDBC MySQL
        https://dev.mysql.com/downloads/connector/j/
        Platform Independent (Architecture Independent), ZIP Archive >> mysql-connector-j-9.3.0.jar
    2) 연동코드

    3) 핵심 인터페이스
        (1) Connection, DB 연동
            [1] Connection conn = DriverManager.getConnection(db_url, db_user,db_pw)
            [2] PreparedStatement ps = conn.prepareStatement(sql);
                - 기재된 상태의 인터페이스 변수명 = DB연동.기재함수(SQL문법);
                - String sql = "insert into tb명( 속성1, 속성2 ) values( ? , ? )";

        (2) PreparedStatement, SQL 조작
            [1] ps.execute();
                - 실행 함수
            [2] ps.executeQuery();
                - Select 문법 실행 결과를 ResultSet 타입으로 반환
            [3] ps.executeUpdate();
                - insert, update, delete 문법 실행 결과, sql 성공 레코드 수를 int 타입으로 변환
            [4] ps.set타입(?번째, 변수);
                - ?번째에 변수 값을 대입하는 함수
                - executeUpdate 이전에 실행하여 sql 문을 작성하는 역할

        (3) ResultSet, SQL 실행 조작
            [1] rs.next();
                - 조회된 레코드 중에서 다음 레코드 이동 함수
            [2] rs.get타입("속성명" or colNo);
                - 현재 레코드에서 지정한 속성명의 값 반환 함수