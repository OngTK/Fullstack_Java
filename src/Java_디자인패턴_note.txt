[ 디자인 패턴 ]
    1. 정의
        소프트웨어 설계과정에서 자주 발생하는 문제에 대한 설계 유형

    2. 목적
        반복되는 문제를 감소시켜 여러 개발자·협업 간에 관례적인 규칙을 정하고, 이를 통해 효율성을 높임

    3. 종류
        1) 싱글톤 패턴
        2) MVC 패턴
        9) ... 그 외에도 다양

[ 싱글톤 패턴 ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★ ]
    1. 정의
        프로그램 내 객체(인스턴스)가 단 1개만 존재하는 설계

    2. 목적
        하나의 객체(인스턴스)를 만들고 이를 공유

        여러 개의 객체가 존재하면 서로 다른 메모리를 사용하므로 공유하는데 제약이 발생
        협업 간에서는 여러 개의 객체가 필요 없는, 단일 객체인 경우 싱글톤을 사용

    3. 사용
        1) 지정한 클래스의 default 생성자를 private로 함
            private 생성자명( ){ }
        2) 지정한 클래스에 `private static final`으로 객체 선언
            private static final 클래스명 변수명 = new 생성자명();
        3) 지정한 클래스에 `public static`으로 getInstance 메소드를 선언
            public static 클래스명 getInstance(){
                return 변수명;
            }

    4. 호출 (다른 클래스에서)
        클래스명.getInstance();


[ MVC 패턴 ]
    1. 정의
        주로 web/app 소프트웨어 개발 시 사용되는 디자인 패턴으로, 세가지 주요 역할을 분리하여 모듈화하는 방법

    2. 목적
        협업 간의 코드와 파일들을 MVC 패턴의 따라 구성하여 효율성 및 유지보수 편의성을 높임
        1) 장점
            유지보수, 모듈화, 단일기능 책임 등
        2) 단점
            분리에 따른 복잡도 증가

    3. 사용처
        다양한 실무 프레임 워크에서 권장하는 패턴
        ex) Spring

    4. 레이어·계층
        1) V : view
            입출력 담당
            (1) 주로 web/app 에서는 HTML/CSS/JS/JPS 등 front-end
            (2) 사용자로부터 입력·출력이 실행
            (3) 일반적으로 console 기준으로 view 클래스에서만 `print`와 `scan` 함수를 사용

        2) C : controller
            model과 view 사이의 제어/전달/유효성 검사 등을 담당
            (1) 주로 web/app 에서는 Java/Python/Node.js 등 back-end
            (2) view로부터 요청을 받아 model에게 전달하고, 처리 결과를 view에게 전달
            (3) 키워드
                - MVC1 패턴 : controller + view (ex. JSP, 머스테치, 타임리프 etc)
                - MVC2 패턴 : controller · view 분리
                - MVC2 패턴 3 Tier : controller · service · view · model 분리 (ex. Spring)

        3) M : model
            데이터 관리 담당
            (1) 주로 web/app 에서는 Java/Python/Node.js 등 back-end
            (2) 데이터베이스와 상호작용
            (3) 주요 키워드
                - DAO (data access object) : 데이터 접근 객체
                >> DB와 연결, DB가 없을 경우 dto[] 배열을 만듦
                >> controller 단에서 만든 dto 객체를 dto[]/DB에 set or get

                - DTO (data transfer object) : 데이터 이동 객체
                >> date 멤버변수 정의 / 생성자 / getter setter / toSting 정의
            (4) 일반적으로 DTO는 데이터 모델이므로 **싱글톤**을 사용하지 않는다.

    5. 레이어·계층 간의 흐름도
        요청
            view ---(DTO)---> controller ---(DTO)---> model(DAO)
        응답
            view <---(DTO)--- controller <---(DTO)--- model(DAO)

    6. 파일/폴더 MVC 기준 구분(구분)
        - 프로젝트 폴더                        ex
            - Controller 폴더                 MemberController, BorderController
            - Model 폴더
                - DAO 폴더                    MemberDao         BoardDao
                - DTO 폴더                    MemberDto         BoardDto
            - View 폴더                       MemberView        BoardView  **추후에는 HTML로 변경
            - AppStart 폴더


[일반적은 MVC 업무 순서]
1. 패키지 생성                       // 폴더 만들기
```
- 프로젝트 폴더
    - Controller 폴더
    - Model 폴더
        - DAO 폴더
        - DTO 폴더
    - View 폴더
    - AppStart 폴더
```
2. 기능파트별 MVC 클래스 생성         // class 만들기
```
- 프로젝트 폴더
    - Controller 폴더
        ▶ Controller.java
    - Model 폴더
        - DAO 폴더
            ▶ Dao.java
        - DTO 폴더
            ▶ Dto.java
    - View 폴더
        ▶ View.java
    ▶ appStart.java
```

3. 기본 MVC class 파일 세팅

    3.1. 싱글톤 선언
        MVC 패턴에서 싱글톤이 필요한 class : view, controller, dao
    ```
    private class명(){}
    private static final class명 변수명 = new class명();
    public static class명 getInstance(){
        return 변수명;
    }
    ```

    3.2. 싱글톤 호출
        싱글톤 호출이 필요한 class :
        view : controller 호출
        controller : dao 호출

    ```
    private 호출Class명 변수명 = 호출Class명.getInstance();
    ```

    3.3. view 에서 기본 화면단 메소드(index) 생성

    ```
    public void index(){
        for(;;){
            System.out.println("기본 텍스트")
            System.out.print("선택 > ")
            int choice = scan.nextInt();

            if(choice == 1 ) {}
            else if(choice == 2 ) {}
        }
    }
    ```

    3.4. appStart에서 기본 화면단 메소드(index) 실행
            appStart : view 호출
    ```
    view클래스명.getInstance().index(); //함수실행
    ```

4. 메모리 설계 ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
    4.1. 엑셀 메모리 테이블 설계
        엑셀을 통해서 멤버변수 명칭/타입/한글명 및 예시 데이터를 정리

    4.2. 엑셀 메모리 테이블 >> dto 멤버변수 구성하기

    4.3. dto에 하기 목록을 생성 (Alt + insert)
        기본생성자 / 전체 매개변수 생성자 / getter / setter / toString

    4.4. dao에 여러 dto를 저장하는 배열을 선언
```
(in class Dao)
    private 클래스Dto[] 클래스DB = new 클래스Dto[100]
```

5. API 명세서(기능 설명서) 작성 ☆★☆★☆★☆★☆★☆★☆★☆★

| no | 기능명(영문) | 기능명(한글) | 매개변수 명 | 매개변수 값 예시 | 반환타입 | 반환값 예시 | 담당자 |
|---|---|---|---|---|---|---|---|

6. API 명세서 기반 기능 구현
ex)
등록 : Dao > controller > view 순으로 진행
(경우에 따라 view > Dao > controller)

7. 전체 기능 구현

8. 화면 연결
    view 에 choice에 따른 메소드 설정